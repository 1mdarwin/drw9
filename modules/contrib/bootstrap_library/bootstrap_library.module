<?php

/**
 * @file
 * Primarily Drupal hooks.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Url;
use Drupal\Core\Installer\InstallerKernel;

define('BOOTSTRAP_MIN_PLUGIN_VERSION', '2.0.0');

/**
 * Implements hook_page_attachments().
 *
 * Use Libraries API to load the js & css files into header.
 */
function bootstrap_library_page_attachments(array &$page) {
  // Don't add the JavaScript and CSS during installation.
  if (InstallerKernel::installationAttempted()) {
    return;
  }
  // Don't add the JavaScript and CSS on specified paths or themes.
  if (!_bootstrap_library_check_theme() || !_bootstrap_library_check_url()) {
    return;
  }
  $config = \Drupal::config('bootstrap_library.settings');
  $cdn = ($config->get('cdn.bootstrap'));
  if ($cdn) {
    $page['#attached']['library'][] = 'bootstrap_library/bootstrap-cdn';
  }
  else {
    $variant_options = ['source', 'minified', 'composer'];
    $variant = $variant_options[$config->get('minimized.options')];
    switch ($variant) {
      case 'minified':
        $page['#attached']['library'][] = 'bootstrap_library/bootstrap';
        break;
      case 'source':
        $page['#attached']['library'][] = 'bootstrap_library/bootstrap-dev';
        break;
      case 'composer':
        $page['#attached']['library'][] = 'bootstrap_library/bootstrap-composer';
        break;
    }
  }
}

/**
 * Implements hook_library_info_build().
 */
function bootstrap_library_library_info_build() {
  $libraries = [];
  $config = \Drupal::config('bootstrap_library.settings');
  $cdn = ($config->get('cdn.bootstrap'));
  if ($cdn) {
    $data = ($config->get('cdn.options'));
    $cdn_options = json_decode($data);
    $list = _bootstrap_library_object_to_array($cdn_options->bootstrap);
    if (!is_array($list[$cdn]['js'])) {
      $list[$cdn]['js'] = array($list[$cdn]['js']);
    }
    $css_uri = $list[$cdn]['css'];
    $libraries['bootstrap-cdn'] = [
      'dependencies' => [
        'core/jquery',
      ],
    ];
    $libraries['bootstrap-cdn']['css']['base'][$css_uri] = [
      'type' => 'external',
    ];
    foreach ($list[$cdn]['js'] as $js_uri) {
      $libraries['bootstrap-cdn']['js'][$js_uri] = [
        'type' => 'external',
      ];
    }
  }
  return $libraries;
}

/**
 * Verify if current theme is selected.
 */
function _bootstrap_library_check_theme() {
  $config = \Drupal::config('bootstrap_library.settings');

  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $valid_themes = $config->get('theme.themes');
  $visibility = $config->get('theme.visibility');
  $theme_match =  !empty($valid_themes) && in_array($theme, $valid_themes);
  $theme_match = !($visibility xor $theme_match);
  return $theme_match;
}

/**
 * Check if bootstrap_library should be active for the current URL.
 *
 * @return bool
 *   TRUE if bootstrap_library should be active for the current page.
 */
function _bootstrap_library_check_url() {
  // Make it possible deactivate bootstrap with
  // parameter ?bootstrap_library=no in the url.
  if (isset($_GET['bootstrap']) && $_GET['bootstrap'] == 'no') {
    return FALSE;
  }

  // Assume there are no matches until one is found.
  $page_match = FALSE;

  // Convert path to lowercase. This allows comparison of the same path
  // with different case. Ex: /Page, /page, /PAGE.
  $config = \Drupal::config('bootstrap_library.settings');
  $pages = mb_strtolower(_bootstrap_library_array_to_string($config->get('url.pages')));

  // Compare the lowercase path alias (if any) and internal path.
  $path = Url::fromRoute('<current>')->toString();
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $path_alias = mb_strtolower(\Drupal::service('path_alias.manager')->getAliasByPath($path, $langcode));
  $page_match = \Drupal::service('path.matcher')->matchPath($path_alias, $pages);
  if ($path_alias != $path) {
    $page_match = $page_match || \Drupal::service('path.matcher')->matchPath($path, $pages);
  }
  $page_match = $config->get('url.visibility') == 0 ? !$page_match : $page_match;

  return $page_match;

}

/**
 * Converts a text with lines (\n) into an array of lines.
 *
 * @return array
 *   Array with as many items as non-empty lines in the text
 */
function _bootstrap_library_string_to_array($text) {
  $text = str_replace("\r\n", "\n", $text);
  return array_filter(explode("\n", $text), 'trim');
}

/**
 * Converts an array of lines into an text with lines (\n).
 *
 * @return string
 *   Text with lines
 */
function _bootstrap_library_array_to_string($array) {
  return implode("\r\n", $array);
}

/**
 * Converts an object to an array.
 *
 * @return array
 *   Object converted.
 */
function _bootstrap_library_object_to_array($data) {
  if (is_array($data) || is_object($data)) {
    $result = array();
    foreach ($data as $key => $value) {
      $result[$key] = _bootstrap_library_object_to_array($value);
    }
    return $result;
  }
  return $data;
}

function _bootstrap_library_isSecure() {
  if ((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') || $_SERVER['SERVER_PORT'] == 443) {
    return 'https:';
  }
  else {
    return 'http:';
  }
}
