<?php

/**
 * @file
 * Allows users to collect entities in arbitrarily ordered lists.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\views\ViewExecutable;
use Drupal\entityqueue\Entity\EntityQueue;
use Drupal\entityqueue\Entity\EntitySubqueue;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_entity_field_access().
 */
function entityqueue_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  // Only allow edit access on a subqueue title field if the queue doesn't have
  // automated subqueues.
  if ($operation == 'edit' && $field_definition->getName() == 'title' && $items && $items->getEntity()->getEntityTypeId() === 'entity_subqueue') {
    /** @var \Drupal\entityqueue\EntityQueueInterface $queue */
    $queue = $items->getEntity()->getQueue();
    return AccessResult::forbiddenIf($queue->getHandlerPlugin()->hasAutomatedSubqueues());
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_views_pre_render().
 *
 * Add contextual links to views before rendering.
 */
function entityqueue_views_pre_render(ViewExecutable $view) {
  // Do not add contextual link on view preview.
  if (\Drupal::moduleHandler()->moduleExists('views_ui') && views_ui_contextual_links_suppress()) {
    return;
  }

  // Allow to disable the contextual links.
  if (!$view->display_handler->getOption('show_admin_links')) {
    return;
  }

  // Get view display relationships.
  $relationships = $view->relationship;
  foreach ($relationships as $relationship) {
    if ($relationship->field == 'entityqueue_relationship') {
      $referenced_subqueues = (array) $relationship->options['limit_queue'];

      // Contextual links can handle only one set of links coming from a module,
      // so we'll have to settle for the first referenced queue.
      if (!empty($referenced_subqueues) && ($subqueue = EntitySubqueue::load(reset($referenced_subqueues)))) {
        $route_parameters = [
          'entity_queue' => $subqueue->getQueue()->id(),
          'entity_subqueue' => $subqueue->id(),
        ];
        $view->element['#contextual_links']['entityqueue'] = [
          'route_parameters' => $route_parameters,
        ];
      }
    }
  }

  // Add contextual link when view row plugin is entity_subqueue,
  // and entity queue filter are provided.
  if ($view->rowPlugin && $view->rowPlugin->getPluginId() == 'entity:entity_subqueue' && $view->rowPlugin->getEntityTypeId() == 'entity_subqueue') {
    $view_filters = $view->filter;
    foreach ($view_filters as $filter) {
      if ($filter->field == 'queue' && !empty($filter->value)) {
        $subqueue = EntitySubqueue::load(reset($filter->value));
        if ($subqueue) {
          $route_parameters = [
            'entity_queue' => $subqueue->getQueue()->id(),
            'entity_subqueue' => $subqueue->id(),
          ];
          $view->element['#contextual_links']['entityqueue'] = [
            'route_parameters' => $route_parameters,
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 *
 * Change Entityqueue on views into off-canvas links if available.
 */
function entityqueue_contextual_links_view_alter(&$element, $items) {
  if (\Drupal::moduleHandler()->moduleExists('settings_tray') && isset($element['#links']['entityentity-subqueueedit-form'])) {
    $element['#links']['entityentity-subqueueedit-form']['attributes'] = [
      'class' => ['use-ajax'],
      'data-dialog-type' => 'dialog',
      'data-dialog-renderer' => 'off_canvas',
      'data-settings-tray-edit' => TRUE,
    ];
  }
}

/**
 * Implements hook_entity_delete().
 *
 * @todo Remove this when https://www.drupal.org/node/2723323 is fixed.
 */
function entityqueue_entity_delete(EntityInterface $entity) {
  // Get all the entity queues referencing the targets entity type.
  $queues = EntityQueue::loadMultipleByTargetType($entity->getEntityTypeId());
  foreach ($queues as $queue) {
    // Get all the subqueues which are referencing the deleted entity.
    $query = \Drupal::entityQuery('entity_subqueue')
      ->accessCheck(FALSE)
      ->condition('queue', $queue->id())
      ->condition('items', $entity->id());
    $result = $query->execute();
    $subqueues = EntitySubqueue::loadMultiple($result);

    // Check if the entity is referenced in a subqueue.
    foreach ($subqueues as $subqueue) {
      if ($subqueue->hasItem($entity)) {
        $subqueue->removeItem($entity)->save();
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function entityqueue_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if (!\Drupal::moduleHandler()->moduleExists('workspaces')) {
    return;
  }

  $joins = $view->getHandlers('relationship');
  $join_ids = \array_keys($joins);
  if (\in_array('entityqueue_relationship', $join_ids, TRUE)) {
    $entity_type_id = 'entity_subqueue';
    $entity_type = \Drupal::entityTypeManager()->getDefinition($entity_type_id);
    $keys = $entity_type->getKeys();

    $revision_table = 'entity_subqueue_revision';
    /** @var $subquery \Drupal\Core\Database\Query\SelectInterface */
    $subquery = $query->getConnection()->select($revision_table);
    $subquery->addExpression("MAX($revision_table.{$keys['revision']})", $keys['revision']);
    if (\Drupal::service('workspaces.manager')->hasActiveWorkspace()) {
      $subquery->condition('workspace', \Drupal::service('workspaces.manager')->getActiveWorkspace()->id());
    }
    else {
      $subquery->condition('revision_default', 1);
    }

    // The table joined in the relationship handler changes based on whether
    // a workspaces is active or not, so use the corresponding table here too.
    $query_table_aliases = \array_keys($query->getTableQueue());
    $query_base_table = $query_table_aliases[1];
    $group_id = $query->setWhereGroup('OR');
    $query->addWhere($group_id, "$query_base_table.{$keys['revision']}", $subquery, 'IN');
    $query->addWhere($group_id, "$query_base_table.{$keys['revision']}", NULL, "IS NULL");
  }
}
